const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');

class WhatsAppService {
    constructor() {
        this.client = null;
        this.isConnected = false;
        this.messageHandler = null; // Fun√ß√£o a ser chamada quando uma mensagem √© recebida
        this.connectedNumber = null; // N√∫mero do bot ap√≥s conex√£o
        this.isSimulationMode = false; // Flag para indicar modo de simula√ß√£o

        // Refer√™ncia ao MessageController, ser√° setada via m√©todo
        this.messageController = null; 

        console.log('üì± Iniciando WhatsApp Web Service');
    }

    /**
     * Seta o MessageController para que o WhatsAppService possa chamar seu m√©todo handleMessage.
     * @param {object} controller Inst√¢ncia do MessageController.
     */
    setMessageController(controller) {
        this.messageController = controller;
        console.log('‚úÖ MessageController injetado no WhatsAppService.');
        // Agora o 'message' event listener pode usar this.messageController
    }

    async initialize() {
        console.log('üîÑ Tentando inicializar WhatsApp Web...');

        // --- L√≥gica de limpeza para evitar conflitos de sess√£o ---
        if (this.client) {
            console.log('üßπ Detectada uma inst√¢ncia anterior do WhatsApp Client. Tentando encerr√°-la...');
            try {
                await this.client.destroy();
                console.log('‚úÖ Inst√¢ncia anterior encerrada com sucesso.');
            } catch (err) {
                console.warn('‚ö†Ô∏è Erro ao tentar encerrar inst√¢ncia anterior:', err.message);
            } finally {
                this.client = null;
                this.isConnected = false;
            }
        }
        // --- Fim da l√≥gica de limpeza ---

        try {
            console.log('üîÑ Conectando ao WhatsApp Web...');

            this.client = new Client({
                authStrategy: new LocalAuth({
                    clientId: 'chatbot-autopecas-v3', // Usar clientId ao inv√©s de name para LocalAuth
                    dataPath: './wwebjs_auth_v3' // Caminho para armazenar os dados da sess√£o
                }),
                puppeteer: {
                    headless: true, // Mantenha como 'true' para execu√ß√£o em servidor
                    args: [
                        '--no-sandbox',
                        '--disable-setuid-sandbox',
                        '--disable-dev-shm-usage',
                        '--disable-accelerated-2d-canvas',
                        '--no-first-run',
                        '--no-zygote',
                        '--disable-gpu',
                        '--disable-web-security',
                        '--disable-features=VizDisplayCompositor',
                        '--single-process' // Adicionado para evitar problemas em ambientes com poucos recursos
                    ]
                },
                webVersionCache: {
                    type: 'remote', // Tenta buscar a vers√£o mais recente remotamente
                    remotePath: 'https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2413.51.html', // Caminho alternativo para a vers√£o web
                }
            });

            // Eventos do cliente WhatsApp
            this.client.on('qr', (qr) => {
                console.log('\nüì± ESCANEIE O QR CODE COM SEU WHATSAPP:\n');
                qrcode.generate(qr, { small: true });
                console.log('\nüìã Abra o WhatsApp no seu celular > Menu > Aparelhos Conectados > Conectar um aparelho\n');
                console.log('‚è∞ QR Code expira em 20 segundos. Se n√£o conseguir, reinicie o servidor.');
            });

            this.client.on('authenticated', () => {
                console.log('\nüì≥ Autenticado! Aguardando conex√£o completa...');
            });

            this.client.on('ready', async () => {
                console.log('\nüéâ ===== CONEX√ÉO WHATSAPP ESTABELECIDA =====');
                console.log('‚úÖ WhatsApp conectado e FUNCIONANDO!');
                this.isConnected = true;
                this.isSimulationMode = false;

                // Tentar descobrir o n√∫mero do bot
                await this.forceNumberDiscovery();
                console.log(`üì± Bot est√° pronto para receber mensagens em ${this.connectedNumber || 'um n√∫mero n√£o descoberto ainda'}`);
                console.log('===================================\n');
                this.showTestInstructions();
            });

            this.client.on('loading_screen', (percent, message) => {
                console.log(`‚è≥ Carregando WhatsApp: ${percent}% - ${message}`);
            });

            this.client.on('message', async (message) => {
                try {
                    // Tentar descobrir o n√∫mero do bot na primeira mensagem recebida
                    if (!this.connectedNumber && message.to) {
                        const botNumber = message.to.replace('@c.us', '');
                        console.log(`\nüéØ ===== N√öMERO DO BOT DESCOBERTO =====\nüìû Seu bot est√° no n√∫mero: ${botNumber}`);
                        this.connectedNumber = botNumber;
                    }

                    // Ignorar mensagens de grupos, suas pr√≥prias mensagens ou status
                    if (message.from.includes('@g.us') || message.fromMe || message.from === 'status@broadcast') {
                        return;
                    }

                    console.log(`\nüì® ===== NOVA MENSAGEM RECEBIDA =====`);
                    console.log(`üë§ De: ${message.from.replace('@c.us', '')}`);
                    console.log(`üí¨ Mensagem: "${message.body}"`);
                    console.log(`‚è∞ Hor√°rio: ${new Date().toLocaleString('pt-BR')}`);
                    console.log(`====================================\n`);

                    // Chamar o MessageController para lidar com a mensagem
                    if (this.messageController) {
                        await this.messageController.handleMessage(message, this); // Passa a si mesmo como whatsappService
                    } else {
                        console.warn('‚ö†Ô∏è MessageController n√£o configurado no WhatsAppService. Mensagem n√£o processada.');
                        await this.sendMessage(message.from, "Desculpe, o bot est√° em manuten√ß√£o. Tente mais tarde.");
                    }
                } catch (error) {
                    console.error('‚ùå Erro ao processar mensagem recebida:', error);
                    await this.sendMessage(message.from, "Ops! Ocorreu um erro interno ao processar sua mensagem. Por favor, tente novamente.");
                }
            });

            this.client.on('auth_failure', (msg) => {
                console.error('‚ùå Falha na autentica√ß√£o WhatsApp:', msg);
                console.log('üí° Tente remover a pasta `wwebjs_auth_v3` e reiniciar para for√ßar um novo QR Code.');
                this.isConnected = false;
                this.setupSimulationMode(); // Volta para o modo simula√ß√£o em caso de falha de autentica√ß√£o
            });

            this.client.on('disconnected', (reason) => {
                console.log('üì¥ WhatsApp desconectado:', reason);
                this.isConnected = false;
                this.connectedNumber = null;
                // Tentar reiniciar em modo simula√ß√£o ou reconectar
                console.log('üîÑ Tentando entrar em modo de simula√ß√£o ap√≥s desconex√£o.');
                this.setupSimulationMode();
            });

            await this.client.initialize();
            return this;

        } catch (error) {
            console.error('‚ùå Erro fatal ao inicializar WhatsApp:', error);
            if (this.client) {
                try {
                    await this.client.destroy();
                    console.log('üßπ Cliente WhatsApp destru√≠do ap√≥s erro na inicializa√ß√£o.');
                } catch (destroyErr) {
                    console.error('‚ùå Erro ao tentar destruir cliente ap√≥s falha na inicializa√ß√£o:', destroyErr.message);
                }
            }
            console.log('üåê WhatsApp real falhou, configurando modo simula√ß√£o.');
            this.setupSimulationMode();
            return this;
        }
    }

    /**
     * Tenta descobrir o n√∫mero do bot ap√≥s a conex√£o.
     */
    async forceNumberDiscovery() {
        try {
            const info = await this.client.info;
            if (info && info.wid && info.wid.user) {
                this.connectedNumber = info.wid.user;
                console.log(`üìû N√öMERO DO BOT: ${this.connectedNumber}`);
            } else {
                console.log('‚ö†Ô∏è N√£o foi poss√≠vel descobrir o n√∫mero do bot pela API.');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao for√ßar descoberta de n√∫mero:', error.message);
        }
    }

    /**
     * Configura o servi√ßo para operar em modo de simula√ß√£o (sem conex√£o real com o WhatsApp).
     */
    setupSimulationMode() {
        this.isSimulationMode = true;
        this.isConnected = true; // No modo simula√ß√£o, consideramos "conectado"
        this.connectedNumber = '5511999999999'; // N√∫mero de simula√ß√£o
        console.log('ü§ñ WhatsAppService configurado para modo SIMULA√á√ÉO.');
        this.showTestInstructions();

        // Enviar uma mensagem simulada ap√≥s um delay
        setTimeout(() => {
            if (this.messageController && this.isSimulationMode) { // Garante que est√° no modo simula√ß√£o e o controller est√° pronto
                console.log('\nüîî ===== MENSAGEM SIMULADA ENVIADA =====');
                const simulatedMessage = {
                    from: '5511888888888@c.us', // N√∫mero de um usu√°rio simulado
                    to: `${this.connectedNumber}@c.us`,
                    body: 'Ol√°, preciso de um filtro de ar para Ford Ka 2012',
                    timestamp: Date.now(),
                    id: 'simulated_msg_' + Date.now(),
                    fromMe: false, // Mensagem de outro usu√°rio
                    hasMedia: false
                };
                console.log(`Simulado: De ${simulatedMessage.from} para ${simulatedMessage.to} - "${simulatedMessage.body}"`);
                this.messageController.handleMessage(simulatedMessage, this);
            }
        }, 15000); // Envia mensagem simulada 15 segundos ap√≥s entrar em modo simula√ß√£o
    }

    /**
     * Exibe instru√ß√µes de teste no console.
     */
    showTestInstructions() {
        console.log('\nüéØ ===== COMO TESTAR O CHATBOT =====');
        console.log(`üìû N√∫mero do Bot: ${this.connectedNumber || 'Aguardando descoberta...'}`);
        console.log('\nüì± Op√ß√µes para testar:');
        console.log('1. üí¨ Envie mensagem para o n√∫mero do bot acima (se conectado ao WhatsApp real).');
        console.log('2. üåê Acesse o painel de teste: http://localhost:3000/test-chat');
        if (this.isSimulationMode) {
            console.log('3. üîî Uma mensagem simulada ser√° enviada em breve (se o modo simula√ß√£o estiver ativo).');
        }
        console.log('===================================\n');
    }

    /**
     * Envia uma mensagem para um chat espec√≠fico.
     * @param {string} chatId ID do chat (ex: 5511999999999@c.us).
     * @param {string} message Conte√∫do da mensagem.
     * @returns {Promise<boolean>} True se a mensagem foi enviada com sucesso, False caso contr√°rio.
     */
    async sendMessage(chatId, message) {
        if (!this.isConnected) {
            console.log('‚ö†Ô∏è WhatsApp n√£o conectado ou em modo simula√ß√£o. Simulando envio...');
            console.log(`üì§ RESPOSTA SIMULADA para ${chatId}:`);
            console.log(`üí¨ ${message}`);
            return true;
        }
        try {
            await this.client.sendMessage(chatId, message);
            console.log(`‚úÖ Mensagem enviada para ${chatId}`);
            return true;
        } catch (error) {
            console.error('‚ùå Erro ao enviar mensagem:', error);
            return false;
        }
    }

    /**
     * Envia um cat√°logo de produtos para o chat.
     * @param {string} chatId ID do chat.
     * @param {Array<object>} products Lista de produtos.
     * @returns {Promise<boolean>} True se o cat√°logo foi enviado, False caso contr√°rio.
     */
    async sendCatalog(chatId, products) {
        const catalogMessage = this.formatCatalogMessage(products);
        return await this.sendMessage(chatId, catalogMessage);
    }

    /**
     * Formata uma lista de produtos em uma mensagem de cat√°logo.
     * @param {Array<object>} products Lista de produtos.
     * @returns {string} Mensagem formatada do cat√°logo.
     */
    formatCatalogMessage(products) {
        if (!products || products.length === 0) {
            return "‚ùå *NENHUMA PE√áA ENCONTRADA*\n\nTente uma busca mais espec√≠fica ou entre em contato conosco!";
        }

        let message = "üõí *CAT√ÅLOGO DE PE√áAS ENCONTRADAS*\n\n";

        products.slice(0, 5).forEach((product, index) => { // Limita a 5 produtos para n√£o sobrecarregar
            message += `${index + 1}Ô∏è‚É£ *${product.name}*\n`;
            message += `üì¶ C√≥digo: ${product.code || 'N/A'}\n`;
            message += `üí∞ Pre√ßo: R$ ${product.price ? product.price.toFixed(2) : 'N/A'}\n`;
            message += `üìä Estoque: ${product.stock !== undefined ? product.stock + ' unidades' : 'N/A'}\n`;
            message += `üöó Compat√≠vel: ${product.compatibility && product.compatibility.length > 0 ? product.compatibility.join(', ') : 'Verificar'}\n`;
            message += `_Marca: ${product.brand || 'N/A'}, Categoria: ${product.category || 'N/A'}_\n\n`;
        });

        if (products.length > 5) {
            message += `‚ûï *E mais ${products.length - 5} produtos dispon√≠veis!* Digite mais detalhes para refinar a busca.\n\n`;
        }

        message += "üìû *Entre em contato para mais informa√ß√µes!*";
        return message;
    }

    /**
     * Simula o recebimento de uma mensagem para fins de teste.
     * @param {string} messageText O texto da mensagem simulada.
     * @param {string} fromNumber O n√∫mero de telefone de origem simulado.
     * @returns {boolean} True se a mensagem simulada foi processada, False caso contr√°rio.
     */
    simulateMessage(messageText, fromNumber) {
        if (this.messageController) {
            console.log('\nüîî ===== MENSAGEM SIMULADA (TESTE EXTERNO) =====');
            const simulatedMessage = {
                from: `${fromNumber}@c.us`,
                to: `${this.connectedNumber}@c.us`,
                body: messageText,
                timestamp: Date.now(),
                id: 'test_ext_' + Date.now(),
                fromMe: false,
                hasMedia: false
            };
            this.messageController.handleMessage(simulatedMessage, this);
            return true;
        }
        return false;
    }

    /**
     * Verifica se o WhatsApp est√° pronto (conectado ou em modo simula√ß√£o).
     * @returns {boolean} True se pronto, False caso contr√°rio.
     */
    isReady() {
        return this.isConnected;
    }

    /**
     * Retorna o n√∫mero de telefone do bot conectado.
     * @returns {string|null} O n√∫mero de telefone ou null se n√£o descoberto.
     */
    getConnectedNumber() {
        return this.connectedNumber;
    }

    /**
     * Destr√≥i a inst√¢ncia do cliente WhatsApp Web.
     * @returns {Promise<void>}
     */
    async destroy() {
        if (this.client && typeof this.client.destroy === 'function') {
            console.log('üßπ Encerrando WhatsApp Web client...');
            try {
                await this.client.destroy();
                this.client = null;
                this.isConnected = false;
                this.connectedNumber = null;
                this.isSimulationMode = false; // Garante que o modo simula√ß√£o seja desativado
                console.log('‚úÖ WhatsApp Web client encerrado com sucesso.');
            } catch (error) {
                console.error('‚ùå Erro ao encerrar WhatsApp Web client:', error);
            }
        }
    }
}

module.exports = WhatsAppService;