// src/controllers/messageController.js
class MessageController {
    constructor(catalogService, aiService) { // Agora recebe aiService
        this.catalogService = catalogService;
        this.aiService = aiService; // Armazena o AI Service
        console.log('‚úÖ MessageController inicializado');
    }

    /**
     * Lida com as mensagens recebidas do usu√°rio, usando IA para entender a inten√ß√£o.
     * @param {object} message Objeto da mensagem recebida (ex: de whatsapp-web.js).
     * @param {object} whatsappService Inst√¢ncia do servi√ßo de WhatsApp para enviar respostas.
     */
    async handleMessage(message, whatsappService) {
        try {
            console.log('üîÑ MessageController processando mensagem...');
            
            const userMessage = message.body.trim();
            const chatId = message.from;
            
            console.log(`üìù Mensagem recebida: "${userMessage}" de ${chatId}`);

            // 1. Processar mensagem com o AIService para obter inten√ß√£o e entidades
            const aiResult = await this.aiService.processMessage(userMessage);
            console.log(`üß† AI detectou: Inten√ß√£o=${aiResult.intent}, Entidades=${JSON.stringify(aiResult.entities)}, Confian√ßa=${aiResult.confidence}`);

            let botResponse = '';
            let productsFound = [];

            // 2. L√≥gica baseada na inten√ß√£o detectada pela IA
            switch (aiResult.intent) {
                case 'greeting':
                    botResponse = this.getGreetingResponse();
                    break;

                case 'catalog_request':
                    // Pega todos os produtos do CatalogService (que j√° est√£o em mem√≥ria)
                    productsFound = this.catalogService.getAllProducts(); 
                    if (productsFound.length > 0) {
                        await whatsappService.sendCatalog(chatId, productsFound);
                    } else {
                        botResponse = "Desculpe, n√£o consegui encontrar nenhum produto no cat√°logo no momento. Por favor, tente mais tarde.";
                    }
                    break;

                case 'help_request':
                    botResponse = this.getHelpResponse();
                    break;

                case 'search_part':
                    const productName = aiResult.entities.product_name || userMessage;
                    const vehicleModel = aiResult.entities.vehicle_model;
                    const vehicleYear = aiResult.entities.vehicle_year;

                    // Constr√≥i a query para o CatalogService
                    const searchQuery = productName;
                    const searchFilters = {};
                    if (vehicleModel) searchFilters.vehicle = vehicleModel;
                    if (vehicleYear) searchFilters.year = vehicleYear;

                    productsFound = await this.catalogService.searchProducts(searchQuery, searchFilters);
                    
                    if (productsFound.length > 0) {
                        console.log(`üîç Encontrados ${productsFound.length} produtos via IA para "${searchQuery}".`);
                        await whatsappService.sendCatalog(chatId, productsFound);
                    } else {
                        botResponse = this.getNoProductsResponse(userMessage);
                    }
                    break;

                case 'price_inquiry':
                    const inquiredProduct = aiResult.entities.product_name;
                    if (inquiredProduct) {
                        const products = await this.catalogService.searchProducts(inquiredProduct, {});
                        if (products.length > 0) {
                            botResponse = `O pre√ßo de ${products[0].name} √© R$ ${products[0].price.toFixed(2)}.`;
                            if (products[0].stock !== undefined && products[0].stock <= 5 && products[0].stock > 0) {
                                botResponse += ` Restam poucas unidades em estoque!`;
                            } else if (products[0].stock === 0) {
                                botResponse += ` Este item est√° sem estoque no momento.`;
                            }
                        } else {
                            botResponse = `N√£o encontrei informa√ß√µes de pre√ßo para "${inquiredProduct}". Tente ser mais espec√≠fico.`;
                        }
                    } else {
                        botResponse = `Para qual pe√ßa voc√™ gostaria de saber o pre√ßo, ${message.from.split('@')[0]}?`;
                    }
                    break;

                case 'escalate_to_human':
                    botResponse = "Entendido, Gabriel! Vou te conectar com um dos nossos atendentes humanos. Por favor, aguarde um momento. Assim que um atendente estiver dispon√≠vel, ele entrar√° em contato.";
                    // Aqui voc√™ implementaria a l√≥gica para notificar um atendente (ex: via um sistema de tickets, Slack, etc.)
                    // Exemplo: await this.someNotificationService.notifyHuman(chatId, userMessage);
                    break;

                case 'goodbye':
                    botResponse = this.getGoodbyeResponse();
                    break;
                    
                case 'error': // Quando o AIService encontra um erro
                case 'general_inquiry': // Quando a IA n√£o tem certeza da inten√ß√£o
                default:
                    // Se a confian√ßa da IA for muito baixa, ou for uma inten√ß√£o geral
                    if (aiResult.confidence && aiResult.confidence < 0.5) {
                        botResponse = this.getNoProductsResponse(userMessage); // Resposta de n√£o entendimento
                    } else {
                        botResponse = aiResult.response; // Resposta direta da IA
                    }
                    break;
            }

            // Envia a resposta se uma foi gerada
            if (botResponse) {
                await whatsappService.sendMessage(chatId, botResponse);
            }
            
            console.log('‚úÖ Mensagem processada com sucesso.');
            
        } catch (error) {
            console.error('‚ùå Erro no MessageController.handleMessage:', error);
            // Resposta de erro para o usu√°rio
            try {
                const errorResponse = "üòÖ Ops! Tive um probleminha t√©cnico. Pode repetir sua mensagem?";
                await whatsappService.sendMessage(message.from, errorResponse);
            } catch (sendError) {
                console.error('‚ùå Erro ao enviar mensagem de erro:', sendError);
            }
        }
    }

    // M√©todos auxiliares de resposta (mantidos do seu c√≥digo original)
    getGreetingResponse() {
        return `üëã *Ol√°! Bem-vindo √† AutoPe√ßas!*

üîß Sou seu assistente virtual e estou aqui para ajudar voc√™ a encontrar as pe√ßas perfeitas para seu ve√≠culo!

üí¨ *Como posso ajudar hoje?*
‚Ä¢ Digite o nome da pe√ßa que precisa
‚Ä¢ Mencione o modelo do seu carro
‚Ä¢ Digite "cat√°logo" para ver todos os produtos
‚Ä¢ Digite "ajuda" para mais op√ß√µes

*Exemplo:* "Preciso de pastilha de freio para Civic 2015"`;
    }

    getHelpResponse() {
        return `‚ùì *Central de Ajuda - AutoPe√ßas*

üîç *Como buscar pe√ßas:*
‚Ä¢ Digite o nome da pe√ßa (ex: "pastilha de freio")
‚Ä¢ Mencione o modelo do carro (ex: "para Civic 2015")
‚Ä¢ Combine ambos (ex: "filtro de √≥leo Corolla")

üìã *Comandos √∫teis:*
‚Ä¢ *"cat√°logo"* - Ver todos os produtos
‚Ä¢ *"ajuda"* - Esta mensagem
‚Ä¢ *"falar com atendente"* - Falar com atendente

üöó *Tipos de pe√ßas dispon√≠veis:*
‚Ä¢ Pastilhas e discos de freio
‚Ä¢ Filtros (√≥leo, ar, combust√≠vel)
‚Ä¢ Amortecedores e molas
‚Ä¢ Velas de igni√ß√£o
‚Ä¢ E muito mais!

üí¨ *Dica:* Seja espec√≠fico! Quanto mais detalhes, melhor posso ajudar!`;
    }

    getNoProductsResponse(originalMessage) {
        return `üîç *Ops! N√£o encontrei pe√ßas para "${originalMessage}"*

üí° *Algumas sugest√µes:*
‚Ä¢ Verifique a grafia do produto
‚Ä¢ Tente termos mais simples (ex: "freio" ao inv√©s de "pastilha de freio dianteira")
‚Ä¢ Mencione apenas o modelo do carro (ex: "Civic" ao inv√©s de "Honda Civic 2015 LX")

üìã Digite *"cat√°logo"* para ver todos os produtos dispon√≠veis

ü§ù Ou digite *"ajuda"* para mais dicas de busca!`;
    }

    getGoodbyeResponse() {
        return `üëã A AutoPe√ßas agradece seu contato! Se precisar de algo mais, √© s√≥ chamar!`;
    }

    // O m√©todo `processProductSelection` seria para um fluxo mais avan√ßado de intera√ß√£o
    // async processProductSelection(message, whatsappService) {
    //     console.log('üîÑ Processando sele√ß√£o de produto...');
    // }
}

module.exports = MessageController;